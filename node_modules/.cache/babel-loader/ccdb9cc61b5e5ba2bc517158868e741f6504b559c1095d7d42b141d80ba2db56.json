{"ast":null,"code":"import{GoogleGenerativeAI}from'@google/generative-ai';// Configuração da API do Gemini\nconst genAI=new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY||'');// Função para converter File para base64\nconst fileToBase64=file=>{return new Promise((resolve,reject)=>{const reader=new FileReader();reader.readAsDataURL(file);reader.onload=()=>{const result=reader.result;const base64=result.split(',')[1];resolve(base64);};reader.onerror=error=>reject(error);});};// Função para converter base64 para Part\nconst base64ToPart=(base64,mimeType)=>{return{inlineData:{data:base64,mimeType:mimeType}};};// Mapeamento de aspect ratios para dimensões\nconst aspectRatioMap={'1:1':{width:1024,height:1024},'16:9':{width:1920,height:1080},'9:16':{width:1080,height:1920},'4:3':{width:1024,height:768},'3:4':{width:768,height:1024},'21:9':{width:2560,height:1080}};// Mapeamento de estilos de retoque\nconst retouchStyleMap={'none':'','enhance':'Melhore a qualidade da imagem, aumente a nitidez e o contraste','vintage':'Aplique um filtro vintage com tons sépia e granulação','modern':'Aplique um estilo moderno com cores vibrantes e alta saturação','artistic':'Transforme em uma obra de arte com pinceladas visíveis'};// Mapeamento de estilos de função\nconst styleFunctionMap={'none':'','oil-painting':'Transforme em uma pintura a óleo clássica','watercolor':'Aplique o estilo aquarela com transparências','sketch':'Converta em um desenho a lápis realista','pop-art':'Aplique o estilo pop art com cores vibrantes','cyberpunk':'Aplique o estilo cyberpunk futurista'};export const generateOrEditImage=async function(prompt,images,aspectRatio){let retouchStyle=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'none';let styleFunctionStyle=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'none';try{const model=genAI.getGenerativeModel({model:'gemini-1.5-flash'});// Preparar o prompt final\nlet finalPrompt=prompt;if(retouchStyle!=='none'){finalPrompt+=\" \".concat(retouchStyleMap[retouchStyle]);}if(styleFunctionStyle!=='none'){finalPrompt+=\" \".concat(styleFunctionMap[styleFunctionStyle]);}// Adicionar instruções de dimensão\nconst dimensions=aspectRatioMap[aspectRatio];finalPrompt+=\" Dimens\\xF5es: \".concat(dimensions.width,\"x\").concat(dimensions.height,\" pixels.\");// Preparar as partes da requisição\nconst parts=[{text:finalPrompt}];// Adicionar imagens se fornecidas\nfor(const imageData of images){const base64=await fileToBase64(imageData.file);const mimeType=imageData.file.type;const imagePart=base64ToPart(base64,mimeType);parts.push(imagePart);}// Gerar a imagem\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst result=await model.generateContent(parts);// const response = await result.response;\n// Para o Gemini, vamos simular a geração de imagem\n// Em uma implementação real, você usaria uma API que realmente gere imagens\n// Por enquanto, retornamos um base64 de uma imagem de exemplo\nconst mockImageBase64=generateMockImage(dimensions.width,dimensions.height,finalPrompt);return mockImageBase64;}catch(error){console.error('Erro ao gerar imagem:',error);throw new Error('Falha ao gerar a imagem. Verifique sua conexão e tente novamente.');}};// Função para gerar uma imagem mock (para demonstração)\nconst generateMockImage=(width,height,prompt)=>{// Em uma implementação real, isso seria substituído pela geração real de imagem\n// Por enquanto, retornamos um base64 de uma imagem simples\nconst canvas=document.createElement('canvas');canvas.width=width;canvas.height=height;const ctx=canvas.getContext('2d');if(!ctx){throw new Error('Não foi possível criar o contexto do canvas');}// Criar um gradiente de fundo\nconst gradient=ctx.createLinearGradient(0,0,width,height);gradient.addColorStop(0,'#667eea');gradient.addColorStop(1,'#764ba2');ctx.fillStyle=gradient;ctx.fillRect(0,0,width,height);// Adicionar texto\nctx.fillStyle='white';ctx.font='bold 24px Arial';ctx.textAlign='center';ctx.fillText('AI Generated Image',width/2,height/2-20);ctx.font='16px Arial';ctx.fillText(prompt.substring(0,50)+'...',width/2,height/2+20);return canvas.toDataURL('image/png').split(',')[1];};","map":{"version":3,"names":["GoogleGenerativeAI","genAI","process","env","REACT_APP_GEMINI_API_KEY","fileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","base64","split","onerror","error","base64ToPart","mimeType","inlineData","data","aspectRatioMap","width","height","retouchStyleMap","styleFunctionMap","generateOrEditImage","prompt","images","aspectRatio","retouchStyle","arguments","length","undefined","styleFunctionStyle","model","getGenerativeModel","finalPrompt","concat","dimensions","parts","text","imageData","type","imagePart","push","generateContent","mockImageBase64","generateMockImage","console","Error","canvas","document","createElement","ctx","getContext","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","font","textAlign","fillText","substring","toDataURL"],"sources":["/Users/pc/ai-image-studio/src/services/geminiService.ts"],"sourcesContent":["import { GoogleGenerativeAI } from '@google/generative-ai';\nimport { ImageData, AspectRatio, RetouchStyle, StyleFunctionStyle } from '../types';\n\n// Configuração da API do Gemini\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\n\n// Função para converter File para base64\nconst fileToBase64 = (file: File): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      const result = reader.result as string;\n      const base64 = result.split(',')[1];\n      resolve(base64);\n    };\n    reader.onerror = error => reject(error);\n  });\n};\n\n// Função para converter base64 para Part\nconst base64ToPart = (base64: string, mimeType: string) => {\n  return {\n    inlineData: {\n      data: base64,\n      mimeType: mimeType\n    }\n  };\n};\n\n// Mapeamento de aspect ratios para dimensões\nconst aspectRatioMap: Record<AspectRatio, { width: number; height: number }> = {\n  '1:1': { width: 1024, height: 1024 },\n  '16:9': { width: 1920, height: 1080 },\n  '9:16': { width: 1080, height: 1920 },\n  '4:3': { width: 1024, height: 768 },\n  '3:4': { width: 768, height: 1024 },\n  '21:9': { width: 2560, height: 1080 }\n};\n\n// Mapeamento de estilos de retoque\nconst retouchStyleMap: Record<RetouchStyle, string> = {\n  'none': '',\n  'enhance': 'Melhore a qualidade da imagem, aumente a nitidez e o contraste',\n  'vintage': 'Aplique um filtro vintage com tons sépia e granulação',\n  'modern': 'Aplique um estilo moderno com cores vibrantes e alta saturação',\n  'artistic': 'Transforme em uma obra de arte com pinceladas visíveis'\n};\n\n// Mapeamento de estilos de função\nconst styleFunctionMap: Record<StyleFunctionStyle, string> = {\n  'none': '',\n  'oil-painting': 'Transforme em uma pintura a óleo clássica',\n  'watercolor': 'Aplique o estilo aquarela com transparências',\n  'sketch': 'Converta em um desenho a lápis realista',\n  'pop-art': 'Aplique o estilo pop art com cores vibrantes',\n  'cyberpunk': 'Aplique o estilo cyberpunk futurista'\n};\n\nexport const generateOrEditImage = async (\n  prompt: string,\n  images: ImageData[],\n  aspectRatio: AspectRatio,\n  retouchStyle: RetouchStyle = 'none',\n  styleFunctionStyle: StyleFunctionStyle = 'none'\n): Promise<string> => {\n  try {\n    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });\n\n    // Preparar o prompt final\n    let finalPrompt = prompt;\n    \n    if (retouchStyle !== 'none') {\n      finalPrompt += ` ${retouchStyleMap[retouchStyle]}`;\n    }\n    \n    if (styleFunctionStyle !== 'none') {\n      finalPrompt += ` ${styleFunctionMap[styleFunctionStyle]}`;\n    }\n\n    // Adicionar instruções de dimensão\n    const dimensions = aspectRatioMap[aspectRatio];\n    finalPrompt += ` Dimensões: ${dimensions.width}x${dimensions.height} pixels.`;\n\n    // Preparar as partes da requisição\n    const parts: any[] = [{ text: finalPrompt }];\n\n    // Adicionar imagens se fornecidas\n    for (const imageData of images) {\n      const base64 = await fileToBase64(imageData.file);\n      const mimeType = imageData.file.type;\n      const imagePart = base64ToPart(base64, mimeType);\n      parts.push(imagePart);\n    }\n\n    // Gerar a imagem\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const result = await model.generateContent(parts);\n    // const response = await result.response;\n    \n    // Para o Gemini, vamos simular a geração de imagem\n    // Em uma implementação real, você usaria uma API que realmente gere imagens\n    // Por enquanto, retornamos um base64 de uma imagem de exemplo\n    const mockImageBase64 = generateMockImage(dimensions.width, dimensions.height, finalPrompt);\n    \n    return mockImageBase64;\n\n  } catch (error) {\n    console.error('Erro ao gerar imagem:', error);\n    throw new Error('Falha ao gerar a imagem. Verifique sua conexão e tente novamente.');\n  }\n};\n\n// Função para gerar uma imagem mock (para demonstração)\nconst generateMockImage = (width: number, height: number, prompt: string): string => {\n  // Em uma implementação real, isso seria substituído pela geração real de imagem\n  // Por enquanto, retornamos um base64 de uma imagem simples\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext('2d');\n  \n  if (!ctx) {\n    throw new Error('Não foi possível criar o contexto do canvas');\n  }\n\n  // Criar um gradiente de fundo\n  const gradient = ctx.createLinearGradient(0, 0, width, height);\n  gradient.addColorStop(0, '#667eea');\n  gradient.addColorStop(1, '#764ba2');\n  \n  ctx.fillStyle = gradient;\n  ctx.fillRect(0, 0, width, height);\n\n  // Adicionar texto\n  ctx.fillStyle = 'white';\n  ctx.font = 'bold 24px Arial';\n  ctx.textAlign = 'center';\n  ctx.fillText('AI Generated Image', width / 2, height / 2 - 20);\n  ctx.font = '16px Arial';\n  ctx.fillText(prompt.substring(0, 50) + '...', width / 2, height / 2 + 20);\n\n  return canvas.toDataURL('image/png').split(',')[1];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}