{"ast":null,"code":"import { GoogleGenerativeAI } from '@google/generative-ai';\n// Configuração da API do Gemini\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\n\n// Função para converter File para base64\nconst fileToBase64 = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      const result = reader.result;\n      const base64 = result.split(',')[1];\n      resolve(base64);\n    };\n    reader.onerror = error => reject(error);\n  });\n};\n\n// Função para converter base64 para Part\nconst base64ToPart = (base64, mimeType) => {\n  return {\n    inlineData: {\n      data: base64,\n      mimeType: mimeType\n    }\n  };\n};\n\n// Mapeamento de aspect ratios para dimensões\nconst aspectRatioMap = {\n  '1:1': {\n    width: 1024,\n    height: 1024\n  },\n  '16:9': {\n    width: 1920,\n    height: 1080\n  },\n  '9:16': {\n    width: 1080,\n    height: 1920\n  },\n  '4:3': {\n    width: 1024,\n    height: 768\n  },\n  '3:4': {\n    width: 768,\n    height: 1024\n  },\n  '21:9': {\n    width: 2560,\n    height: 1080\n  }\n};\n\n// Mapeamento de estilos de retoque\nconst retouchStyleMap = {\n  'none': '',\n  'enhance': 'Melhore a qualidade da imagem, aumente a nitidez e o contraste',\n  'vintage': 'Aplique um filtro vintage com tons sépia e granulação',\n  'modern': 'Aplique um estilo moderno com cores vibrantes e alta saturação',\n  'artistic': 'Transforme em uma obra de arte com pinceladas visíveis'\n};\n\n// Mapeamento de estilos de função\nconst styleFunctionMap = {\n  'none': '',\n  'oil-painting': 'Transforme em uma pintura a óleo clássica',\n  'watercolor': 'Aplique o estilo aquarela com transparências',\n  'sketch': 'Converta em um desenho a lápis realista',\n  'pop-art': 'Aplique o estilo pop art com cores vibrantes',\n  'cyberpunk': 'Aplique o estilo cyberpunk futurista'\n};\nexport const generateOrEditImage = async (prompt, images, aspectRatio, retouchStyle = 'none', styleFunctionStyle = 'none') => {\n  try {\n    const model = genAI.getGenerativeModel({\n      model: 'gemini-1.5-flash'\n    });\n\n    // Preparar o prompt final\n    let finalPrompt = prompt;\n    if (retouchStyle !== 'none') {\n      finalPrompt += ` ${retouchStyleMap[retouchStyle]}`;\n    }\n    if (styleFunctionStyle !== 'none') {\n      finalPrompt += ` ${styleFunctionMap[styleFunctionStyle]}`;\n    }\n\n    // Adicionar instruções de dimensão\n    const dimensions = aspectRatioMap[aspectRatio];\n    finalPrompt += ` Dimensões: ${dimensions.width}x${dimensions.height} pixels.`;\n\n    // Preparar as partes da requisição\n    const parts = [{\n      text: finalPrompt\n    }];\n\n    // Adicionar imagens se fornecidas\n    for (const imageData of images) {\n      const base64 = await fileToBase64(imageData.file);\n      const mimeType = imageData.file.type;\n      const imagePart = base64ToPart(base64, mimeType);\n      parts.push(imagePart);\n    }\n\n    // Gerar a imagem\n    const result = await model.generateContent(parts);\n    const response = await result.response;\n\n    // Para o Gemini, vamos simular a geração de imagem\n    // Em uma implementação real, você usaria uma API que realmente gere imagens\n    // Por enquanto, retornamos um base64 de uma imagem de exemplo\n    const mockImageBase64 = generateMockImage(dimensions.width, dimensions.height, finalPrompt);\n    return mockImageBase64;\n  } catch (error) {\n    console.error('Erro ao gerar imagem:', error);\n    throw new Error('Falha ao gerar a imagem. Verifique sua conexão e tente novamente.');\n  }\n};\n\n// Função para gerar uma imagem mock (para demonstração)\nconst generateMockImage = (width, height, prompt) => {\n  // Em uma implementação real, isso seria substituído pela geração real de imagem\n  // Por enquanto, retornamos um base64 de uma imagem simples\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    throw new Error('Não foi possível criar o contexto do canvas');\n  }\n\n  // Criar um gradiente de fundo\n  const gradient = ctx.createLinearGradient(0, 0, width, height);\n  gradient.addColorStop(0, '#667eea');\n  gradient.addColorStop(1, '#764ba2');\n  ctx.fillStyle = gradient;\n  ctx.fillRect(0, 0, width, height);\n\n  // Adicionar texto\n  ctx.fillStyle = 'white';\n  ctx.font = 'bold 24px Arial';\n  ctx.textAlign = 'center';\n  ctx.fillText('AI Generated Image', width / 2, height / 2 - 20);\n  ctx.font = '16px Arial';\n  ctx.fillText(prompt.substring(0, 50) + '...', width / 2, height / 2 + 20);\n  return canvas.toDataURL('image/png').split(',')[1];\n};","map":{"version":3,"names":["GoogleGenerativeAI","genAI","process","env","REACT_APP_GEMINI_API_KEY","fileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","base64","split","onerror","error","base64ToPart","mimeType","inlineData","data","aspectRatioMap","width","height","retouchStyleMap","styleFunctionMap","generateOrEditImage","prompt","images","aspectRatio","retouchStyle","styleFunctionStyle","model","getGenerativeModel","finalPrompt","dimensions","parts","text","imageData","type","imagePart","push","generateContent","response","mockImageBase64","generateMockImage","console","Error","canvas","document","createElement","ctx","getContext","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","font","textAlign","fillText","substring","toDataURL"],"sources":["/Users/pc/ai-image-studio/src/services/geminiService.ts"],"sourcesContent":["import { GoogleGenerativeAI } from '@google/generative-ai';\nimport { ImageData, AspectRatio, RetouchStyle, StyleFunctionStyle } from '../types';\n\n// Configuração da API do Gemini\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\n\n// Função para converter File para base64\nconst fileToBase64 = (file: File): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      const result = reader.result as string;\n      const base64 = result.split(',')[1];\n      resolve(base64);\n    };\n    reader.onerror = error => reject(error);\n  });\n};\n\n// Função para converter base64 para Part\nconst base64ToPart = (base64: string, mimeType: string) => {\n  return {\n    inlineData: {\n      data: base64,\n      mimeType: mimeType\n    }\n  };\n};\n\n// Mapeamento de aspect ratios para dimensões\nconst aspectRatioMap: Record<AspectRatio, { width: number; height: number }> = {\n  '1:1': { width: 1024, height: 1024 },\n  '16:9': { width: 1920, height: 1080 },\n  '9:16': { width: 1080, height: 1920 },\n  '4:3': { width: 1024, height: 768 },\n  '3:4': { width: 768, height: 1024 },\n  '21:9': { width: 2560, height: 1080 }\n};\n\n// Mapeamento de estilos de retoque\nconst retouchStyleMap: Record<RetouchStyle, string> = {\n  'none': '',\n  'enhance': 'Melhore a qualidade da imagem, aumente a nitidez e o contraste',\n  'vintage': 'Aplique um filtro vintage com tons sépia e granulação',\n  'modern': 'Aplique um estilo moderno com cores vibrantes e alta saturação',\n  'artistic': 'Transforme em uma obra de arte com pinceladas visíveis'\n};\n\n// Mapeamento de estilos de função\nconst styleFunctionMap: Record<StyleFunctionStyle, string> = {\n  'none': '',\n  'oil-painting': 'Transforme em uma pintura a óleo clássica',\n  'watercolor': 'Aplique o estilo aquarela com transparências',\n  'sketch': 'Converta em um desenho a lápis realista',\n  'pop-art': 'Aplique o estilo pop art com cores vibrantes',\n  'cyberpunk': 'Aplique o estilo cyberpunk futurista'\n};\n\nexport const generateOrEditImage = async (\n  prompt: string,\n  images: ImageData[],\n  aspectRatio: AspectRatio,\n  retouchStyle: RetouchStyle = 'none',\n  styleFunctionStyle: StyleFunctionStyle = 'none'\n): Promise<string> => {\n  try {\n    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });\n\n    // Preparar o prompt final\n    let finalPrompt = prompt;\n    \n    if (retouchStyle !== 'none') {\n      finalPrompt += ` ${retouchStyleMap[retouchStyle]}`;\n    }\n    \n    if (styleFunctionStyle !== 'none') {\n      finalPrompt += ` ${styleFunctionMap[styleFunctionStyle]}`;\n    }\n\n    // Adicionar instruções de dimensão\n    const dimensions = aspectRatioMap[aspectRatio];\n    finalPrompt += ` Dimensões: ${dimensions.width}x${dimensions.height} pixels.`;\n\n    // Preparar as partes da requisição\n    const parts: any[] = [{ text: finalPrompt }];\n\n    // Adicionar imagens se fornecidas\n    for (const imageData of images) {\n      const base64 = await fileToBase64(imageData.file);\n      const mimeType = imageData.file.type;\n      const imagePart = base64ToPart(base64, mimeType);\n      parts.push(imagePart);\n    }\n\n    // Gerar a imagem\n    const result = await model.generateContent(parts);\n    const response = await result.response;\n    \n    // Para o Gemini, vamos simular a geração de imagem\n    // Em uma implementação real, você usaria uma API que realmente gere imagens\n    // Por enquanto, retornamos um base64 de uma imagem de exemplo\n    const mockImageBase64 = generateMockImage(dimensions.width, dimensions.height, finalPrompt);\n    \n    return mockImageBase64;\n\n  } catch (error) {\n    console.error('Erro ao gerar imagem:', error);\n    throw new Error('Falha ao gerar a imagem. Verifique sua conexão e tente novamente.');\n  }\n};\n\n// Função para gerar uma imagem mock (para demonstração)\nconst generateMockImage = (width: number, height: number, prompt: string): string => {\n  // Em uma implementação real, isso seria substituído pela geração real de imagem\n  // Por enquanto, retornamos um base64 de uma imagem simples\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext('2d');\n  \n  if (!ctx) {\n    throw new Error('Não foi possível criar o contexto do canvas');\n  }\n\n  // Criar um gradiente de fundo\n  const gradient = ctx.createLinearGradient(0, 0, width, height);\n  gradient.addColorStop(0, '#667eea');\n  gradient.addColorStop(1, '#764ba2');\n  \n  ctx.fillStyle = gradient;\n  ctx.fillRect(0, 0, width, height);\n\n  // Adicionar texto\n  ctx.fillStyle = 'white';\n  ctx.font = 'bold 24px Arial';\n  ctx.textAlign = 'center';\n  ctx.fillText('AI Generated Image', width / 2, height / 2 - 20);\n  ctx.font = '16px Arial';\n  ctx.fillText(prompt.substring(0, 50) + '...', width / 2, height / 2 + 20);\n\n  return canvas.toDataURL('image/png').split(',')[1];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}